//=====Declarations=====

//---I/O Pin Associations---
#define opButtons 2 // Operation buttons
#define selectButtons 3 // Navigation buttons
#define activeLED 4 // LED to show when system is busy carrying out tasks
#define onOffANDallOn 5 // Multiplexed. On/Off function w/ ISR1, 'All on' function w/ ISR0.
#define upANDallOff 6 // Multiplexed.
#define downANDforceOff 7  // Multiplexed.
#define relayPowerControl 8 // Relays are disconnected from power until shift registers are cleared to prevent unpredictable behavior at power up.
//#define UNUSED 9
//#define UNUSED 10
//#define UNUSED 11
//#define UNUSED 12
//#define UNUSED 13
#define relayData 14  // SER
#define relayClk 15 //SRCLK
#define relayLatch 16 // RCLK
#define segData 17  // SER
#define segClk 18 // SRCLK
#define segLatch 19 // RCLK

//---Arrays---
uint8_t segArray[17];
uint16_t relayArray[17];

//---Booleans---
bool countUp = false;
bool countDown = false;
bool startStop = false;
bool startAll = false;
bool stopAll = false;
bool forceOff = false;

//---Constants---
#define CPU_TOGGLE_TIME 500 // Simulates you pressing the power button, in milliseconds
#define CPU_KILL_TIME 5000  // Time you have to hold down the power button to force it to shut down in milliseconds
#define CPU_ON_INTERVAL 2000  // Time in between cpu starts in milliseconds
#define CPU_OFF_INTERVAL 10  // Time in between cpu stops in milliseconds
#define ON true
#define OFF false

//---Variables---
uint8_t segCounter = 1;

//=====Program Initialization=====
void setup() 
{
  pinMode(opButtons, INPUT_PULLUP);
  pinMode(selectButtons, INPUT_PULLUP);
  pinMode(onOffANDallOn, INPUT_PULLUP);
  pinMode(upANDallOff, INPUT_PULLUP);
  pinMode(downANDforceOff, INPUT_PULLUP);
  pinMode(activeLED, OUTPUT);
  pinMode(relayPowerControl, OUTPUT);
  pinMode(relayData, OUTPUT);
  pinMode(relayClk, OUTPUT);
  pinMode(relayLatch, OUTPUT);
  pinMode(segData, OUTPUT);
  pinMode(segClk, OUTPUT);
  pinMode(segLatch, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(opButtons), operationISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(selectButtons), selectISR, FALLING);
  
  segArray[0]  = 0b00000000; // 00 <- Not used for counting. Used to clear 7-segment register
  segArray[1]  = 0b00000001; // 01
  segArray[2]  = 0b00000010; // 02
  segArray[3]  = 0b00000011; // 03
  segArray[4]  = 0b00000100; // 04
  segArray[5]  = 0b00000101; // 05
  segArray[6]  = 0b00000110; // 06
  segArray[7]  = 0b00000111; // 07
  segArray[8]  = 0b00001000; // 08
  segArray[9]  = 0b00001001; // 09
  segArray[10] = 0b00010000; // 10
  segArray[11] = 0b00010001; // 11
  segArray[12] = 0b00010010; // 12
  segArray[13] = 0b00010011; // 13
  segArray[14] = 0b00010100; // 14
  segArray[15] = 0b00010101; // 15
  segArray[16] = 0b00010110; // 16

  relayArray[0]  = 0b1111111111111111;  // Used to clear relay registers
  relayArray[1]  = 0b1111111111111110;  // CPU 1
  relayArray[2]  = 0b1111111111111101;  // CPU 2
  relayArray[3]  = 0b1111111111111011;  // .
  relayArray[4]  = 0b1111111111110111;  // .
  relayArray[5]  = 0b1111111111101111;  // .
  relayArray[6]  = 0b1111111111011111;
  relayArray[7]  = 0b1111111110111111;
  relayArray[8]  = 0b1111111101111111;
  relayArray[9]  = 0b1111111011111111;
  relayArray[10] = 0b1111110111111111;
  relayArray[11] = 0b1111101111111111;
  relayArray[12] = 0b1111011111111111;
  relayArray[13] = 0b1110111111111111;  // .
  relayArray[14] = 0b1101111111111111;  // .
  relayArray[15] = 0b1011111111111111;  // .
  relayArray[16] = 0b0111111111111111;  // CPU 16

  clearAllRegisters();  // Clean outputs
  displayInit(); // Initialize to CPU 1
  enableRelays(); // Enable output relays
}

//=====Interrupt Service Routines=====
void selectISR(void)
{
  bool onOff = digitalRead(onOffANDallOn);
  bool up = digitalRead(upANDallOff);
  bool down = digitalRead(downANDforceOff);

  if (!getStatus()) // Allows only one operation to be carried before another can be run
  {
    if (!onOff)
      startStop = true;
    else if (!up)
      countUp = true;
    else if (!down)
      countDown = true;
  }
}

void operationISR(void)
{
  bool allOn = digitalRead(onOffANDallOn);
  bool allOff = digitalRead(upANDallOff);
  bool killCPU = digitalRead(downANDforceOff);

  if (!getStatus()) // Allows only one operation to be carried before another can be run
  {
    if (!allOn)
      startAll = true;
    else if (!allOff)
      stopAll = true;
    else if (!killCPU)
      forceOff = true;
  }
}

//=====Main Program=====
void loop() 
{
  if (countUp)
  {
    segCountUp();
    countUp = false;  // Reset semaphore
  }

  if (countDown)
  {
    segCountDown();
    countDown = false;
  }
  
  if (startStop)
  {
    startStopCPU(segCounter); // Whichever number is on the display will be toggled
    startStop = false;  
  }
  
  if (startAll)
  {
    startAllCPU();
    startAll = false;
  }
  
  if (stopAll)
  {
    stopAllCPU();
    stopAll = false;
  }
  
  if (forceOff)
  {
    forceOffCPU(segCounter); // Whichever number is on the display will be forced to shut down
    forceOff = false;
  }
}

//=====Functions=====
void startStopCPU(uint8_t cpu)
{
  digitalWrite(activeLED, HIGH);
  
  toggleCPU(cpu, ON);  // 'toggleCPU(ON)' is equivalent to you pressing the power button to turn on/off the CPU
  delay(CPU_TOGGLE_TIME); // Hold it for this long
  toggleCPU(cpu, OFF); // 'Release' power button

  digitalWrite(activeLED, LOW);
}

void forceOffCPU(uint8_t cpu)
{
  digitalWrite(activeLED, HIGH); // Indicate the system is working
  
  toggleCPU(cpu, ON); // 'Press' power button
  delay(CPU_KILL_TIME); // Hold it for this long, forcing the CPU to turn off
  toggleCPU(cpu, OFF); // 'Release' power button

  digitalWrite(activeLED, LOW); // Done working
}

void startAllCPU(void)
{
  digitalWrite(activeLED, HIGH);  // Indicate the system is working

  for (uint8_t cpu = 1; cpu <= 16; cpu++)
  {
    printToDisplay(cpu); // Show number of current CPU being cycled
    
    toggleCPU(cpu, ON);  // 'toggleCPU(ON)' is equivalent to you pressing the power button to turn on/off the CPU
    delay(CPU_TOGGLE_TIME); // Hold it for this long
    toggleCPU(cpu, OFF); // 'Release' power button

    delay(CPU_ON_INTERVAL);  // Wait in between boot ups to prevent large power surge (ie. 16 CPUs starting at once)
  }

  printToDisplay(segCounter); // Reset display to original state
  digitalWrite(activeLED, LOW); // Done working
}

void stopAllCPU(void)
{
  digitalWrite(activeLED, HIGH);  // Indicate the system is working

  for (uint8_t cpu = 1; cpu <= 16; cpu++)
  {
    printToDisplay(cpu); // Show number of current CPU being cycled
    
    toggleCPU(cpu, ON);  // 'toggleCPU(ON)' is equivalent to you pressing the power button to turn on/off the CPU
    delay(CPU_TOGGLE_TIME); // Hold it for this long
    toggleCPU(cpu, OFF); // 'Release' power button
    
    delay(CPU_OFF_INTERVAL);
  }

  printToDisplay(segCounter); // Reset display to original state
  digitalWrite(activeLED, LOW); // Done working
}

void enableRelays(void)
{
  digitalWrite(relayPowerControl, LOW);
}

void toggleCPU(uint8_t cpu, bool state)
{
  if (state)  // For the 'ON' toggle, 'press' power button
  {
    digitalWrite(relayLatch, LOW);
    shiftOut(relayData, relayClk, MSBFIRST, highByte(relayArray[cpu]));
    shiftOut(relayData, relayClk, MSBFIRST, lowByte(relayArray[cpu]));
    digitalWrite(relayLatch, HIGH);
  }
  else // For the 'OFF' toggle, 'let go' of the power button by clearing bit (and everything else; though no other should be on)
    clearRelayRegisters();
}

void clearRelayRegisters(void)
{
  digitalWrite(relayLatch, LOW);
  shiftOut(relayData, relayClk, MSBFIRST, highByte(relayArray[0]));
  shiftOut(relayData, relayClk, MSBFIRST, lowByte(relayArray[0]));
  digitalWrite(relayLatch, HIGH);
}

void clearAllRegisters(void)
{
  // Clear relay registers
  digitalWrite(relayLatch, LOW);
  shiftOut(relayData, relayClk, MSBFIRST, highByte(relayArray[0]));
  shiftOut(relayData, relayClk, MSBFIRST, lowByte(relayArray[0]));
  digitalWrite(relayLatch, HIGH);

  // Clear 7-segment display registers
  digitalWrite(segLatch, LOW);
  shiftOut(segData, segClk, MSBFIRST, segArray[0]);
  digitalWrite(segLatch, HIGH);
}

void displayInit(void)
{
  digitalWrite(segLatch, LOW);
  shiftOut(segData, segClk, MSBFIRST, segArray[segCounter]);
  digitalWrite(segLatch, HIGH);
}

void printToDisplay(uint8_t n)
{
  digitalWrite(segLatch, LOW);
  shiftOut(segData, segClk, MSBFIRST, segArray[n]);
  digitalWrite(segLatch, HIGH);
}

bool getStatus(void)
{
  return countUp | countDown | startStop | startAll | stopAll | forceOff;  // If any are true, will evaluate to true; 
}

//---Counters---
void segCountUp(void)
{
  segCounter++;

  if (segCounter > 16)
    segCounter = 16;
  else
  {
    digitalWrite(segLatch, LOW);
    shiftOut(segData, segClk, MSBFIRST, segArray[segCounter]);
    digitalWrite(segLatch, HIGH);
  }
}

void segCountDown(void)
{
  segCounter--;

  if (segCounter < 1)
    segCounter = 1;
  else
  {
    digitalWrite(segLatch, LOW);
    shiftOut(segData, segClk, MSBFIRST, segArray[segCounter]);
    digitalWrite(segLatch, HIGH);
  }
}
